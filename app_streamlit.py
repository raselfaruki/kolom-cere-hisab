# app_streamlit.py - Imports
import streamlit as st
from modules.invoice import invoice_ui
from modules.products import product_ui
from modules.customers import customer_ui
from modules.reports import reports_ui
from modules.auth import validate_user, validate_license_key

from datetime import date, timedelta

# app_streamlit.py - Streamlit Page Configuration
import streamlit as st # Import streamlit again for clarity in this cell

st.set_page_config("‡¶ï‡¶≤‡¶Æ ‡¶õ‡¶æ‡ßú‡¶æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨", layout="wide")

# app_streamlit.py - License Validation Section
import streamlit as st # Import streamlit again for clarity in this cell
from modules.auth import validate_license_key # Import necessary function

st.markdown("üîê **‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®**")

# Initialize session state variables for authentication
if "auth" not in st.session_state:
    st.session_state.auth = False
if "authenticated" not in st.session_state:

# License key validation UI
if not st.session_state.authenticated:
    username = st.text_input("üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ")
    license_key = st.text_input("üîë ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡ßÄ")
    if st.button("‡¶≤‡¶ó‡¶á‡¶®"):
        if validate_license_key(username, license_key):
            st.success("‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡¶®!")
            st.session_state.authenticated = True
        else:
            st.error("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡ßÄ ‡¶≠‡ßÅ‡¶≤!")    st.session_state.authenticated = False

# License key validation UI
if not st.session_state.authenticated:
    username = st.text_input("üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ")
    license_key = st.text_input("üîë ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡ßÄ")
    if st.button("‡¶≤‡¶ó‡¶á‡¶®"):
        if validate_license_key(username, license_key):
            st.success("‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡¶®!")
            st.session_state.authenticated = True
        else:
            st.error("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡ßÄ ‡¶≠‡ßÅ‡¶≤!")

# app_streamlit.py - Login Page Function
import streamlit as st # Import streamlit again for clarity in this cell
from modules.auth import validate_user # Import necessary function

def login_page():
    st.title("‚úíÔ∏è ‡¶ï‡¶≤‡¶Æ ‡¶õ‡¶æ‡ßú‡¶æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ - ‡¶≤‡¶ó‡¶á‡¶®")
    user = st.text_input("üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ")
    pwd = st.text_input("üîê ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶°", type="password")
    if st.button("üö™ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®"):
        if validate_user(user, pwd):
            st.session_state.auth = True
            st.session_state.username = user
            st.success("‚úÖ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤!")
        else:
            st.error("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞/‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤")

# app_streamlit.py - Dashboard Function
import streamlit as st # Import streamlit again for clarity in this cell
# Import necessary UI functions and utility functions
from modules.invoice import invoice_ui
from modules.products import product_ui
from modules.customers import customer_ui
from modules.reports import reports_ui
from interest_utils import calculate_interest
from datetime import date

def dashboard():
    st.sidebar.title("üìã ‡¶Æ‡ßá‡¶®‡ßÅ")
    # Sidebar for navigation
    choice = st.sidebar.selectbox("‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", ["‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°", "‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏", "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü", "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞", "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü"])

    # Display different UI based on sidebar selection
    if choice == "‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°":
        # Placeholder for dashboard content
        st.subheader("‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°")
        st.success(f"üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {st.session_state.username}!")
        # The overdue invoice display logic was originally outside functions, moved here.
        st.subheader("‡¶¨‡§ï‡•á‡ßü‡¶æ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶∏‡¶Æ‡ßÇ‡¶π")
        # This invoice_list is hardcoded, should likely come from a database
        invoice_list = [
            {"customer": "‡¶ú‡¶®", "due_date": date.today(), "total": 1000, "paid": 0},
            {"customer": "‡¶∏‡¶æ‡¶¨‡¶ø‡¶®‡¶æ", "due_date": date.today(), "total": 800, "paid": 1}
        ]
        for inv in invoice_list:
            due = inv["due_date"]
            total = inv["total"]
            paid = inv["paid"]
            if paid == 0:
                interest = calculate_interest(due, total)
                total_with_interest = total + interest
                st.write(f"üßæ {inv['customer']} ‚û§ ‡¶Æ‡ßÇ‡¶≤: {total}‡ß≥  ‡¶∏‡ßÅ‡¶¶: {interest}‡ß≥  ‡¶Æ‡ßã‡¶ü: {total_with_interest}‡ß≥  ‡¶°‡¶ø‡¶â: {due}")

    elif choice == "‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏":
        invoice_ui()
    elif choice == "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü":
        product_ui()
    elif choice == "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞":
        customer_ui()
    elif choice == "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü":
        reports_ui() # Corrected function call

# app_streamlit.py - Main Application Flow
import streamlit as st # Import streamlit again for clarity in this cell
# Assuming login_page and dashboard functions are defined in previous cells
# from .app_streamlit import login_page, dashboard # Example if using relative imports

# This controls whether to show the login page or the dashboard
if st.session_state.auth:
    dashboard()
    # Assuming the content for dashboard choices will be handled within the dashboard function
    # based on the selected choice in the sidebar.
    # The rendering of invoice_ui, product_ui, etc., should happen within the dashboard function.
else:
    login_page()

# app_streamlit.py - Payment Logic (Originally commented out and likely misplaced)
# import streamlit as st # Import streamlit again for clarity in this cell
# Assuming calculate_interest and mark_paid are available
# from interest_utils import calculate_interest
# from modules.invoice import mark_paid

# This part was outside the main app flow and seemed to rely on an 'invoice' variable
# which is not defined in this scope. If this is part of the invoice UI, it should
# be moved into modules/invoice.py or handled within the invoice_ui function.
# if st.button("‚úÖ ‡¶¨‡¶ï‡ßá‡ßü‡¶æ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß"):
#     # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ > due_date ‡¶π‡¶≤‡ßá ‡¶∏‡ßÅ‡¶¶ ‡¶ß‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
#     interest = calculate_interest(invoice['due_date'], invoice['total'])
#     grand_total = invoice['total'] + interest

#     mark_paid(invoice_id, grand_total)  # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá paid = 1 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
#     st.success(f"üì¨ ‡¶Æ‡ßã‡¶ü {grand_total}‡ß≥ ‡¶Ü‡¶¶‡¶æ‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶∏‡ßÅ‡¶¶‡¶∏‡¶π)")