# app_streamlit.py
import streamlit as st
from modules.invoice import invoice_ui
from modules.products import product_ui
from modules.customers import customer_ui
from modules.reports import reports_ui
# whatsapp.py - Imports
import requests # Example using requests, replace with your API's method

# whatsapp.py - send_whatsapp_message function
import requests # Example using requests, replace with your API's method

def send_whatsapp_message(to_number, message):
    """
    Example function to send a WhatsApp message.
    Replace with actual API calls and authentication.
    """
    # Replace with your WhatsApp API endpoint and credentials
    api_url = "YOUR_WHATSAPP_API_ENDPOINT"
    api_key = "YOUR_API_KEY"
    api_secret = "YOUR_API_SECRET" # Or other authentication method

    payload = {
        "to": to_number,
        "body": message
    }

    headers = {
        "Authorization": f"Bearer {api_key}", # Example auth header
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(api_url, json=payload, headers=headers)
        response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)
        print("WhatsApp message sent successfully!")
        return True
    except requests.exceptions.RequestException as e:
        print(f"Error sending WhatsApp message: {e}")
        return False

# Example usage (requires proper API setup and credentials)
# send_whatsapp_message("+1234567890", "Hello from your app!")
st.set_page_config("‡¶ï‡¶≤‡¶Æ ‡¶õ‡¶æ‡ßú‡¶æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨", layout="wide")


st.markdown("üîê **‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®**")


from modules.auth import validate_user, validate_license_key  # make sure this is imported

if "auth" not in st.session_state:
    st.session_state.auth = False
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

# whatsapp.py - Imports
import requests # Example using requests, replace with your API's method

# whatsapp.py - send_whatsapp_message function
import requests # Example using requests, replace with your API's method

def send_whatsapp_message(to_number, message):
    """
    Example function to send a WhatsApp message.
    Replace with actual API calls and authentication.
    """
    # Replace with your WhatsApp API endpoint and credentials
    api_url = "YOUR_WHATSAPP_API_ENDPOINT"
    api_key = "YOUR_API_KEY"
    api_secret = "YOUR_API_SECRET" # Or other authentication method

    payload = {
        "to": to_number,
        "body": message
    }

    headers = {
        "Authorization": f"Bearer {api_key}", # Example auth header
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(api_url, json=payload, headers=headers)
        response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)
        print("WhatsApp message sent successfully!")
        return True
    except requests.exceptions.RequestException as e:
        print(f"Error sending WhatsApp message: {e}")
        return False

# Example usage (requires proper API setup and credentials)
# send_whatsapp_message("+1234567890", "Hello from your app!")

if st.session_state.authenticated:
    st.subheader("üßæ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®")
    customer = st.text_input("üë• ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
    products = get_all_products()
    product_names = [p[0] for p in products]

from datetime import date, timedelta

due_date = st.date_input("üìÖ ‡¶°‡¶ø‡¶â ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", value=date.today() + timedelta(days=21))



def login_page():
    st.title("‚úíÔ∏è ‡¶ï‡¶≤‡¶Æ ‡¶õ‡¶æ‡ßú‡¶æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ - ‡¶≤‡¶ó‡¶á‡¶®")
    user = st.text_input("üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ")
    pwd = st.text_input("üîê ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶°", type="password")
    if st.button("üö™ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®"):
        if validate_user(user, pwd):
            st.session_state.auth = True
            st.session_state.username = user
            st.success("‚úÖ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤!")
        else:
            st.error("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞/‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤")

def dashboard():
    st.sidebar.title("üìã ‡¶Æ‡ßá‡¶®‡ßÅ")
    choice = st.sidebar.selectbox("‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", ["‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°", "‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏", "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü", "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞", "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü"])

from interest_utils import calculate_interest

# ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
from datetime import date

invoice_list = [
    {"customer": "‡¶ú‡¶®", "due_date": date.today(), "total": 1000, "paid": 0},
    {"customer": "‡¶∏‡¶æ‡¶¨‡¶ø‡¶®‡¶æ", "due_date": date.today(), "total": 800, "paid": 1}
]


for inv in invoice_list:
    due = inv["due_date"]
    total = inv["total"]
    paid = inv["paid"]

    if paid == 0:
        interest = calculate_interest(due, total)
        total_with_interest = total + interest
        st.write(f"üßæ {inv['customer']} ‚û§ ‡¶Æ‡ßÇ‡¶≤: {total}‡ß≥  ‡¶∏‡ßÅ‡¶¶: {interest}‡ß≥  ‡¶Æ‡ßã‡¶ü: {total_with_interest}‡ß≥  ‡¶°‡¶ø‡¶â: {due}")


st.title("‚úíÔ∏è ‡¶ï‡¶≤‡¶Æ ‡¶õ‡¶æ‡ßú‡¶æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨")

if choice == "‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°":
    st.success(f"üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {st.session_state.username}!")
elif choice == "‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏":
    invoice_ui()
elif choice == "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü":
    product_ui()
elif choice == "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞":
    customer_ui()
elif choice == "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü":
    report_ui()

if st.session_state.auth:
    dashboard()
else:
    login_page()

# ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü
if st.button("‚úÖ ‡¶¨‡¶ï‡ßá‡ßü‡¶æ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß"):
    # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ > due_date ‡¶π‡¶≤‡ßá ‡¶∏‡ßÅ‡¶¶ ‡¶ß‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    interest = calculate_interest(invoice['due_date'], invoice['total'])
    grand_total = invoice['total'] + interest

    mark_paid(invoice_id, grand_total)  # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá paid = 1 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    st.success(f"üì¨ ‡¶Æ‡ßã‡¶ü {grand_total}‡ß≥ ‡¶Ü‡¶¶‡¶æ‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶∏‡ßÅ‡¶¶‡¶∏‡¶π)")

