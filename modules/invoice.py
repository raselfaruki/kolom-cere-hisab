# modules/invoice.py - Imports
import streamlit as st
import sqlite3
from datetime import date
# Assuming calculate_interest is imported in the main app or available globally
# from interest_utils import calculate_interest

# modules/invoice.py - get_all_invoices function
import sqlite3 # Import for clarity

def get_all_invoices():
    conn = sqlite3.connect("db/hisab.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM invoices")
    invoices = cursor.fetchall()
    conn.close()
    return invoices

# modules/invoice.py - add_invoice function
import streamlit as st # Import for clarity
import sqlite3 # Import for clarity
from datetime import date # Import for clarity

def add_invoice(customer, product, qty, rate, total, invoice_date, due_date):
    conn = sqlite3.connect("db/hisab.db")
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO invoices (customer, product, qty, rate, total, invoice_date, due_date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (customer, product, qty, rate, total, invoice_date, due_date))
        conn.commit()
        st.success("‚úÖ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    except Exception as e:
        st.error(f"Error adding invoice: {e}")
    conn.close()

# modules/invoice.py - mark_paid function
import streamlit as st # Import for clarity
import sqlite3 # Import for clarity

def mark_paid(invoice_id, paid_amount):
    conn = sqlite3.connect("db/hisab.db")
    cursor = conn.cursor()
    try:
        # Assuming marking paid means setting the 'paid' column to 1
        # In a real app, you might have a separate payments table
        cursor.execute("UPDATE invoices SET paid = 1 WHERE id = ?", (invoice_id,))
        conn.commit()
        st.success(f"üì¨ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ #{invoice_id} ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    except Exception as e:
        st.error(f"Error marking invoice paid: {e}")
    conn.close()

# modules/invoice.py - invoice_ui function
import streamlit as st # Import for clarity
from datetime import date # Import for clarity
# Assuming get_all_invoices, add_invoice, mark_paid, and calculate_interest are available
# from .invoice import get_all_invoices, add_invoice, mark_paid
# from interest_utils import calculate_interest


def invoice_ui():
    st.title("üßæ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏")

    st.subheader("‚ûï ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®")
    # You would likely need to fetch lists of customers and products here
    # Example placeholders:
    customer = st.text_input("‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
    product = st.text_input("‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ") # Consider using a selectbox with available products
    qty = st.number_input("‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£", min_value=1, value=1)
    rate = st.number_input("‡¶∞‡ßá‡¶ü", min_value=0.0, value=0.0)
    total = qty * rate
    st.write(f"‡¶Æ‡ßã‡¶ü: {total}‡ß≥")

    invoice_date = st.date_input("üìÖ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", value=date.today())
    due_date = st.date_input("üìÖ ‡¶°‡¶ø‡¶â ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", value=date.today()) # You might want a default based on terms


    if st.button("‚úÖ ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã"):
        add_invoice(customer, product, qty, rate, total, invoice_date.isoformat(), due_date.isoformat())

    st.subheader("üìã ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
    invoices = get_all_invoices()

    if invoices:
        # Assuming invoice structure is (id, customer, product, qty, rate, total, invoice_date, due_date, paid)
        for inv in invoices:
            inv_id, customer, product, qty, rate, total, invoice_date_str, due_date_str, paid = inv
            due_date = date.fromisoformat(due_date_str)
            invoice_date = date.fromisoformat(invoice_date_str)

            interest = calculate_interest(due_date, total) # Assuming calculate_interest is available
            grand_total = total + interest

            st.write(f"---")
            st.write(f"‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶Ü‡¶á‡¶°‡¶ø: #{inv_id}")
            st.write(f"‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞: {customer}")
            st.write(f"‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü: {product} (‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {qty}, ‡¶∞‡ßá‡¶ü: {rate}‡ß≥)")
            st.write(f"‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {invoice_date}")
            st.write(f"‡¶°‡¶ø‡¶â ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {due_date}")
            st.write(f"‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡¶æ‡¶ï‡¶æ: {total}‡ß≥")
            st.write(f"‡¶∏‡ßÅ‡¶¶: {interest}‡ß≥")
            st.write(f"‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ: {grand_total}‡ß≥")
            st.write(f"‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡¶ø‡¶§: {'‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' if paid else '‡¶®‡¶æ'}")

            if paid == 0 and st.button(f"‚úÖ ‡¶¨‡¶ï‡ßá‡ßü‡¶æ ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß #{inv_id}"):
                 mark_paid(inv_id, grand_total) # In a real app, you'd handle the actual payment amount
                 st.experimental_rerun() # Rerun to update the list after payment

    else:
        st.write("‡¶ï‡ßã‡¶® ‡¶á‡¶®‡¶≠‡ßü‡ßá‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")