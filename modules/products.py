# modules/products.py - Imports
import streamlit as st
import sqlite3

# modules/products.py - get_all_products function
import sqlite3 # Import for clarity

def get_all_products():
    conn = sqlite3.connect("db/products.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    return products

# modules/products.py - add_product function
import streamlit as st # Import for clarity
import sqlite3 # Import for clarity

def add_product(name, price, buy_price):
    conn = sqlite3.connect("db/products.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO products (name, price, buy_price) VALUES (?, ?, ?)", (name, price, buy_price))
        conn.commit()
        st.success(f"‚úÖ {name} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    except sqlite3.IntegrityError:
        st.error(f"‚ùå ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü '{name}' ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ü‡¶õ‡ßá‡•§")
    except Exception as e:
        st.error(f"Error adding product: {e}")
    conn.close()

# modules/products.py - product_ui function
import streamlit as st # Import for clarity
# Assuming get_all_products and add_product are available
# from .products import get_all_products, add_product # Example if using relative imports

def product_ui():
    st.title("üì¶ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü")

    st.subheader("‚ûï ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®")
    name = st.text_input("‡¶®‡¶æ‡¶Æ")
    price = st.number_input("‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø", min_value=0.0, value=0.0)
    buy_price = st.number_input("‡¶ï‡ßç‡¶∞‡ßü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø", min_value=0.0, value=0.0)

    if st.button("‚ûï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã"):
        add_product(name, price, buy_price)

    st.subheader("üìã ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
    products = get_all_products()

    if products:
        for product in products:
            # Assuming product structure is (id, name, price, buy_price)
            st.write(f"‡¶®‡¶æ‡¶Æ: {product[1]}, ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø: {product[2]}‡ß≥, ‡¶ï‡ßç‡¶∞‡ßü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø: {product[3]}‡ß≥")
    else:
        st.write("‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")